// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/events/v1beta1/events.proto

package eventsv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventContextMultiError, or
// nil if none found.
func (m *EventContext) ValidateAll() error {
	return m.validate(true)
}

func (m *EventContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EventContextValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EventContextValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EventContextValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return EventContextMultiError(errors)
	}

	return nil
}

// EventContextMultiError is an error wrapping multiple validation errors
// returned by EventContext.ValidateAll() if the designated constraints aren't met.
type EventContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventContextMultiError) AllErrors() []error { return m }

// EventContextValidationError is the validation error returned by
// EventContext.Validate if the designated constraints aren't met.
type EventContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventContextValidationError) ErrorName() string { return "EventContextValidationError" }

// Error satisfies the builtin error interface
func (e EventContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventContextValidationError{}

// Validate checks the field values on AuthenticationEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationEventMultiError, or nil if none found.
func (m *AuthenticationEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationEventValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationEventValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationEventValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Result

	// no validation rules for Subject

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationEventValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSourcePosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationEventValidationError{
					field:  "SourcePosition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationEventValidationError{
					field:  "SourcePosition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourcePosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationEventValidationError{
				field:  "SourcePosition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthenticationEventMultiError(errors)
	}

	return nil
}

// AuthenticationEventMultiError is an error wrapping multiple validation
// errors returned by AuthenticationEvent.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationEventMultiError) AllErrors() []error { return m }

// AuthenticationEventValidationError is the validation error returned by
// AuthenticationEvent.Validate if the designated constraints aren't met.
type AuthenticationEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationEventValidationError) ErrorName() string {
	return "AuthenticationEventValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationEventValidationError{}

// Validate checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmailMultiError, or nil if none found.
func (m *Email) ValidateAll() error {
	return m.validate(true)
}

func (m *Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Name

	if len(errors) > 0 {
		return EmailMultiError(errors)
	}

	return nil
}

// EmailMultiError is an error wrapping multiple validation errors returned by
// Email.ValidateAll() if the designated constraints aren't met.
type EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailMultiError) AllErrors() []error { return m }

// EmailValidationError is the validation error returned by Email.Validate if
// the designated constraints aren't met.
type EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidationError) ErrorName() string { return "EmailValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidationError{}

// Validate checks the field values on SendTemplateEmailEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTemplateEmailEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTemplateEmailEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTemplateEmailEventMultiError, or nil if none found.
func (m *SendTemplateEmailEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTemplateEmailEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendTemplateEmailEventValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendTemplateEmailEventValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendTemplateEmailEventValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplyTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendTemplateEmailEventValidationError{
					field:  "ReplyTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendTemplateEmailEventValidationError{
					field:  "ReplyTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendTemplateEmailEventValidationError{
				field:  "ReplyTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("To[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("To[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendTemplateEmailEventValidationError{
					field:  fmt.Sprintf("To[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCc() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("Cc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("Cc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendTemplateEmailEventValidationError{
					field:  fmt.Sprintf("Cc[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBcc() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("Bcc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("Bcc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendTemplateEmailEventValidationError{
					field:  fmt.Sprintf("Bcc[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Subject

	// no validation rules for Headers

	// no validation rules for CustomArgs

	{
		sorted_keys := make([]string, len(m.GetDynamicTemplateValues()))
		i := 0
		for key := range m.GetDynamicTemplateValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDynamicTemplateValues()[key]
			_ = val

			// no validation rules for DynamicTemplateValues[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SendTemplateEmailEventValidationError{
							field:  fmt.Sprintf("DynamicTemplateValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SendTemplateEmailEventValidationError{
							field:  fmt.Sprintf("DynamicTemplateValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SendTemplateEmailEventValidationError{
						field:  fmt.Sprintf("DynamicTemplateValues[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetSendAtTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendTemplateEmailEventValidationError{
					field:  "SendAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendTemplateEmailEventValidationError{
					field:  "SendAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendAtTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendTemplateEmailEventValidationError{
				field:  "SendAtTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BatchId

	if len(errors) > 0 {
		return SendTemplateEmailEventMultiError(errors)
	}

	return nil
}

// SendTemplateEmailEventMultiError is an error wrapping multiple validation
// errors returned by SendTemplateEmailEvent.ValidateAll() if the designated
// constraints aren't met.
type SendTemplateEmailEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTemplateEmailEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTemplateEmailEventMultiError) AllErrors() []error { return m }

// SendTemplateEmailEventValidationError is the validation error returned by
// SendTemplateEmailEvent.Validate if the designated constraints aren't met.
type SendTemplateEmailEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTemplateEmailEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTemplateEmailEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTemplateEmailEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTemplateEmailEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTemplateEmailEventValidationError) ErrorName() string {
	return "SendTemplateEmailEventValidationError"
}

// Error satisfies the builtin error interface
func (e SendTemplateEmailEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTemplateEmailEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTemplateEmailEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTemplateEmailEventValidationError{}

// Validate checks the field values on SendMessageEmailEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageEmailEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageEmailEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageEmailEventMultiError, or nil if none found.
func (m *SendMessageEmailEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageEmailEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageEmailEventValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageEmailEventValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageEmailEventValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplyTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageEmailEventValidationError{
					field:  "ReplyTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageEmailEventValidationError{
					field:  "ReplyTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageEmailEventValidationError{
				field:  "ReplyTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("To[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("To[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageEmailEventValidationError{
					field:  fmt.Sprintf("To[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCc() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("Cc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("Cc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageEmailEventValidationError{
					field:  fmt.Sprintf("Cc[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBcc() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("Bcc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("Bcc[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageEmailEventValidationError{
					field:  fmt.Sprintf("Bcc[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Subject

	// no validation rules for TextContent

	// no validation rules for HtmlContent

	// no validation rules for Headers

	// no validation rules for CustomArgs

	{
		sorted_keys := make([]string, len(m.GetDynamicTemplateValues()))
		i := 0
		for key := range m.GetDynamicTemplateValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDynamicTemplateValues()[key]
			_ = val

			// no validation rules for DynamicTemplateValues[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SendMessageEmailEventValidationError{
							field:  fmt.Sprintf("DynamicTemplateValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SendMessageEmailEventValidationError{
							field:  fmt.Sprintf("DynamicTemplateValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SendMessageEmailEventValidationError{
						field:  fmt.Sprintf("DynamicTemplateValues[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetSendAtTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageEmailEventValidationError{
					field:  "SendAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageEmailEventValidationError{
					field:  "SendAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendAtTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageEmailEventValidationError{
				field:  "SendAtTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BatchId

	if len(errors) > 0 {
		return SendMessageEmailEventMultiError(errors)
	}

	return nil
}

// SendMessageEmailEventMultiError is an error wrapping multiple validation
// errors returned by SendMessageEmailEvent.ValidateAll() if the designated
// constraints aren't met.
type SendMessageEmailEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageEmailEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageEmailEventMultiError) AllErrors() []error { return m }

// SendMessageEmailEventValidationError is the validation error returned by
// SendMessageEmailEvent.Validate if the designated constraints aren't met.
type SendMessageEmailEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageEmailEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageEmailEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageEmailEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageEmailEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageEmailEventValidationError) ErrorName() string {
	return "SendMessageEmailEventValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageEmailEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageEmailEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageEmailEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageEmailEventValidationError{}

// Validate checks the field values on OPADecisionLogEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OPADecisionLogEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OPADecisionLogEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OPADecisionLogEventMultiError, or nil if none found.
func (m *OPADecisionLogEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *OPADecisionLogEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	// no validation rules for DecisionId

	{
		sorted_keys := make([]string, len(m.GetBundles()))
		i := 0
		for key := range m.GetBundles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBundles()[key]
			_ = val

			// no validation rules for Bundles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, OPADecisionLogEventValidationError{
							field:  fmt.Sprintf("Bundles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, OPADecisionLogEventValidationError{
							field:  fmt.Sprintf("Bundles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return OPADecisionLogEventValidationError{
						field:  fmt.Sprintf("Bundles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Path

	// no validation rules for Query

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OPADecisionLogEventValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OPADecisionLogEventValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	// no validation rules for RequestedBy

	if all {
		switch v := interface{}(m.GetAtTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "AtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "AtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAtTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OPADecisionLogEventValidationError{
				field:  "AtTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OPADecisionLogEventValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OPADecisionLogEventValidationError{
				field:  "Metrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OPADecisionLogEventMultiError(errors)
	}

	return nil
}

// OPADecisionLogEventMultiError is an error wrapping multiple validation
// errors returned by OPADecisionLogEvent.ValidateAll() if the designated
// constraints aren't met.
type OPADecisionLogEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OPADecisionLogEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OPADecisionLogEventMultiError) AllErrors() []error { return m }

// OPADecisionLogEventValidationError is the validation error returned by
// OPADecisionLogEvent.Validate if the designated constraints aren't met.
type OPADecisionLogEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OPADecisionLogEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OPADecisionLogEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OPADecisionLogEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OPADecisionLogEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OPADecisionLogEventValidationError) ErrorName() string {
	return "OPADecisionLogEventValidationError"
}

// Error satisfies the builtin error interface
func (e OPADecisionLogEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOPADecisionLogEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OPADecisionLogEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OPADecisionLogEventValidationError{}

// Validate checks the field values on BundleInfoV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BundleInfoV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BundleInfoV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BundleInfoV1MultiError, or
// nil if none found.
func (m *BundleInfoV1) ValidateAll() error {
	return m.validate(true)
}

func (m *BundleInfoV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Revision

	if len(errors) > 0 {
		return BundleInfoV1MultiError(errors)
	}

	return nil
}

// BundleInfoV1MultiError is an error wrapping multiple validation errors
// returned by BundleInfoV1.ValidateAll() if the designated constraints aren't met.
type BundleInfoV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BundleInfoV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BundleInfoV1MultiError) AllErrors() []error { return m }

// BundleInfoV1ValidationError is the validation error returned by
// BundleInfoV1.Validate if the designated constraints aren't met.
type BundleInfoV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleInfoV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleInfoV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleInfoV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleInfoV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleInfoV1ValidationError) ErrorName() string { return "BundleInfoV1ValidationError" }

// Error satisfies the builtin error interface
func (e BundleInfoV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleInfoV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleInfoV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleInfoV1ValidationError{}

// Validate checks the field values on HTTPRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HTTPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HTTPRequestMultiError, or
// nil if none found.
func (m *HTTPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for RouteKey

	// no validation rules for RawPath

	// no validation rules for RawQueryString

	// no validation rules for Headers

	// no validation rules for QueryStringParameters

	// no validation rules for PathParameters

	if all {
		switch v := interface{}(m.GetRequestContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPRequestValidationError{
					field:  "RequestContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPRequestValidationError{
					field:  "RequestContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPRequestValidationError{
				field:  "RequestContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StageVariables

	// no validation rules for Body

	// no validation rules for IsBase64Encoded

	if len(errors) > 0 {
		return HTTPRequestMultiError(errors)
	}

	return nil
}

// HTTPRequestMultiError is an error wrapping multiple validation errors
// returned by HTTPRequest.ValidateAll() if the designated constraints aren't met.
type HTTPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPRequestMultiError) AllErrors() []error { return m }

// HTTPRequestValidationError is the validation error returned by
// HTTPRequest.Validate if the designated constraints aren't met.
type HTTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestValidationError) ErrorName() string { return "HTTPRequestValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestValidationError{}

// Validate checks the field values on HTTPRequestContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HTTPRequestContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPRequestContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HTTPRequestContextMultiError, or nil if none found.
func (m *HTTPRequestContext) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPRequestContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RouteKey

	// no validation rules for AccountId

	// no validation rules for Stage

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetAuthorizer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPRequestContextValidationError{
					field:  "Authorizer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPRequestContextValidationError{
					field:  "Authorizer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorizer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPRequestContextValidationError{
				field:  "Authorizer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DomainName

	// no validation rules for DomainPrefix

	// no validation rules for Time

	// no validation rules for TimeEpoch

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPRequestContextValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPRequestContextValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPRequestContextValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HTTPRequestContextMultiError(errors)
	}

	return nil
}

// HTTPRequestContextMultiError is an error wrapping multiple validation errors
// returned by HTTPRequestContext.ValidateAll() if the designated constraints
// aren't met.
type HTTPRequestContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPRequestContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPRequestContextMultiError) AllErrors() []error { return m }

// HTTPRequestContextValidationError is the validation error returned by
// HTTPRequestContext.Validate if the designated constraints aren't met.
type HTTPRequestContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestContextValidationError) ErrorName() string {
	return "HTTPRequestContextValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPRequestContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequestContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestContextValidationError{}

// Validate checks the field values on HTTPRequestContextAuthorizerDescription
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *HTTPRequestContextAuthorizerDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// HTTPRequestContextAuthorizerDescription with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// HTTPRequestContextAuthorizerDescriptionMultiError, or nil if none found.
func (m *HTTPRequestContextAuthorizerDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPRequestContextAuthorizerDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPRequestContextAuthorizerDescriptionValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPRequestContextAuthorizerDescriptionValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPRequestContextAuthorizerDescriptionValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HTTPRequestContextAuthorizerDescriptionMultiError(errors)
	}

	return nil
}

// HTTPRequestContextAuthorizerDescriptionMultiError is an error wrapping
// multiple validation errors returned by
// HTTPRequestContextAuthorizerDescription.ValidateAll() if the designated
// constraints aren't met.
type HTTPRequestContextAuthorizerDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPRequestContextAuthorizerDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPRequestContextAuthorizerDescriptionMultiError) AllErrors() []error { return m }

// HTTPRequestContextAuthorizerDescriptionValidationError is the validation
// error returned by HTTPRequestContextAuthorizerDescription.Validate if the
// designated constraints aren't met.
type HTTPRequestContextAuthorizerDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestContextAuthorizerDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestContextAuthorizerDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestContextAuthorizerDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestContextAuthorizerDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestContextAuthorizerDescriptionValidationError) ErrorName() string {
	return "HTTPRequestContextAuthorizerDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPRequestContextAuthorizerDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequestContextAuthorizerDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestContextAuthorizerDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestContextAuthorizerDescriptionValidationError{}

// Validate checks the field values on
// HTTPRequestContextAuthorizerJWTDescription with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HTTPRequestContextAuthorizerJWTDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// HTTPRequestContextAuthorizerJWTDescription with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// HTTPRequestContextAuthorizerJWTDescriptionMultiError, or nil if none found.
func (m *HTTPRequestContextAuthorizerJWTDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPRequestContextAuthorizerJWTDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Claims

	if len(errors) > 0 {
		return HTTPRequestContextAuthorizerJWTDescriptionMultiError(errors)
	}

	return nil
}

// HTTPRequestContextAuthorizerJWTDescriptionMultiError is an error wrapping
// multiple validation errors returned by
// HTTPRequestContextAuthorizerJWTDescription.ValidateAll() if the designated
// constraints aren't met.
type HTTPRequestContextAuthorizerJWTDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPRequestContextAuthorizerJWTDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPRequestContextAuthorizerJWTDescriptionMultiError) AllErrors() []error { return m }

// HTTPRequestContextAuthorizerJWTDescriptionValidationError is the validation
// error returned by HTTPRequestContextAuthorizerJWTDescription.Validate if
// the designated constraints aren't met.
type HTTPRequestContextAuthorizerJWTDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestContextAuthorizerJWTDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestContextAuthorizerJWTDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestContextAuthorizerJWTDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestContextAuthorizerJWTDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestContextAuthorizerJWTDescriptionValidationError) ErrorName() string {
	return "HTTPRequestContextAuthorizerJWTDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPRequestContextAuthorizerJWTDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequestContextAuthorizerJWTDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestContextAuthorizerJWTDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestContextAuthorizerJWTDescriptionValidationError{}

// Validate checks the field values on HTTPRequestContextHTTPDescription with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *HTTPRequestContextHTTPDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPRequestContextHTTPDescription
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// HTTPRequestContextHTTPDescriptionMultiError, or nil if none found.
func (m *HTTPRequestContextHTTPDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPRequestContextHTTPDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Protocol

	// no validation rules for SourceIp

	// no validation rules for UserAgent

	if len(errors) > 0 {
		return HTTPRequestContextHTTPDescriptionMultiError(errors)
	}

	return nil
}

// HTTPRequestContextHTTPDescriptionMultiError is an error wrapping multiple
// validation errors returned by
// HTTPRequestContextHTTPDescription.ValidateAll() if the designated
// constraints aren't met.
type HTTPRequestContextHTTPDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPRequestContextHTTPDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPRequestContextHTTPDescriptionMultiError) AllErrors() []error { return m }

// HTTPRequestContextHTTPDescriptionValidationError is the validation error
// returned by HTTPRequestContextHTTPDescription.Validate if the designated
// constraints aren't met.
type HTTPRequestContextHTTPDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestContextHTTPDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestContextHTTPDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestContextHTTPDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestContextHTTPDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestContextHTTPDescriptionValidationError) ErrorName() string {
	return "HTTPRequestContextHTTPDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPRequestContextHTTPDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequestContextHTTPDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestContextHTTPDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestContextHTTPDescriptionValidationError{}
